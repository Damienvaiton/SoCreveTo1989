import { REST, Routes } from "discord.js";
import dotenv from "dotenv";
import fs from "fs";
import path from "path";
import { pathToFileURL } from "url";

dotenv.config();

const commands = [];

const commandsPath = path.join(process.cwd(), "src", "commands");
const commandFiles = fs
	.readdirSync(commandsPath)
	.filter((file) => file.endsWith(".ts") || file.endsWith(".js"));

for (const file of commandFiles) {
	const filePath = path.join(commandsPath, file);
	const fileUrl = pathToFileURL(filePath).href;

	try {
		const commandModule = await import(fileUrl);

		// Essayer diff√©rentes fa√ßons d'importer
		const command = commandModule.default || commandModule;

		console.log(`üìÅ Chargement de ${file}:`, {
			hasDefault: !!commandModule.default,
			hasData: !!command?.data,
			hasExecute: !!command?.execute,
			keys: Object.keys(commandModule),
		});

		if (command && "data" in command && "execute" in command) {
			commands.push(command.data.toJSON());
			console.log(`‚úÖ Commande ${command.data.name} ajout√©e`);
		} else {
			console.warn(`[‚ö†Ô∏è] La commande ${file} est invalide ou mal export√©e`);
			console.warn(`Structure:`, command);
		}
	} catch (error) {
		console.error(`‚ùå Erreur lors du chargement de ${file}:`, error);
	}
}

const rest = new REST({ version: "10" }).setToken(
	process.env.DISCORD_API_TOKEN!
);

(async () => {
	try {
		console.log(`üì¶ D√©ploiement de ${commands.length} commandes...`);

		if (commands.length === 0) {
			console.warn("‚ö†Ô∏è Aucune commande √† d√©ployer !");
			return;
		}

		await rest.put(Routes.applicationCommands(process.env.CLIENT_ID!), {
			body: commands,
		});

		console.log("‚úÖ Commandes d√©ploy√©es !");
	} catch (error) {
		console.error("‚ùå Erreur lors du d√©ploiement :", error);
	}
})();
